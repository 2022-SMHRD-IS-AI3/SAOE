<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.saoe.mapper.MemberMapper">

	<insert id="join" parameterType="MemberDTO">
		insert into member (id, pw,
		name, nick, tel, addr, birth, gender, profile, profile_message, join_date, member_score, grade)
		values (#{id}, #{pw}, #{name}, #{nick}, #{tel}, #{addr}, #{birth},
		#{gender}, #{profile}, #{profile_message}, sysdate, #{member_score}, #{grade})
	</insert>

	<select id="login" parameterType="LoginDTO" resultType="SessionUserDTO">
		select id, name, nick, profile, profile_message from member where id = #{id} and pw = #{pw}
	</select>

	<select id="loginMember" parameterType="MemberDTO"
		resultType="MemberMemberDTO">
		select * from member_member where actor_id = #{id} or id = #{id}
	</select>

	<select id="loginReview" parameterType="MemberDTO"
		resultType="ReviewMemberDTO">
		select * from review_member where actor_id = #{id}
	</select>

	<select id="loginRest" parameterType="MemberDTO"
		resultType="RestMemberDTO">
		select * from rest_member where actor_id = #{id}
	</select>

	<update id="updateMember" parameterType="MemberDTO">
		update member set pw =
		#{pw}, nick = #{nick}, tel = #{tel}, addr = #{addr} where id = #{id}
	</update>

	<update id="followMember" parameterType="MemberMemberDTO">
		MERGE INTO member_member
		USING DUAL
		ON (id = #{id} AND actor_id = #{actor_id})
		WHEN NOT
		MATCHED
		THEN
		INSERT (id, actor_id, member_follow_yn,
		member_follow_date)
		values
		(#{id}, #{actor_id}, #{member_follow_yn}, sysdate)
		WHEN MATCHED
		THEN
		UPDATE SET
		member_follow_yn = #{member_follow_yn}, member_follow_date =
		sysdate
	</update>

	<update id="blockMember" parameterType="MemberMemberDTO">
		MERGE INTO member_member
		USING DUAL
		ON (id = #{id} AND actor_id = #{actor_id})
		WHEN NOT
		MATCHED
		THEN
		INSERT (id, actor_id, member_block_yn,
		member_block_date)
		values
		(#{id}, #{actor_id}, #{member_block_yn}, sysdate)
		WHEN MATCHED
		THEN
		UPDATE SET
		member_block_yn = #{member_block_yn}, member_block_date =
		sysdate
	</update>

	<update id="reportMember" parameterType="MemberMemberDTO">
		MERGE INTO member_member
		USING DUAL
		ON (id = #{id} AND actor_id = #{actor_id})
		WHEN NOT
		MATCHED
		THEN
		INSERT (id, actor_id, member_rep_yn, member_rep_content,
		member_rep_date)
		values
		(#{id}, #{actor_id}, #{member_rep_yn},
		#{member_rep_content}, sysdate)
		WHEN MATCHED
		THEN
		UPDATE SET
		member_rep_yn = #{member_rep_yn}, member_rep_content =
		#{member_rep_content}, member_rep_date =
		sysdate
	</update>
	
	<select id="selectMember" parameterType="MemberDTO" resultType="MemberDTO">
		select id, nick, addr, gender, profile, join_date from member where id = #{id}
	</select>
	
	<select id="selectFollowingList" parameterType="MemberDTO" resultType="MemberDTO">
		select id, nick, profile from member where id in (select id from member_member where actor_id = #{id} and member_follow_yn = 1)
	</select>
	
	<select id="selectFollowerList" parameterType="MemberDTO" resultType="MemberDTO">
		select id, nick, profile from member where id in (select id from member_member where id = #{id} and member_follow_yn = 1)
	</select>
	
	<select id="selectBlockList" parameterType="MemberDTO" resultType="MemberDTO">
		select id, nick, profile from member where id in (select id from member_member where actor_id = #{id} and member_block_yn = 1)
	</select>
	
	<select id="selectReportList" parameterType="MemberDTO" resultType="MemberDTO">
		select id, nick, profile from member where id in (select id from member_member where actor_id = #{id} and member_rep_yn = 1)
	</select>
	
	


</mapper>